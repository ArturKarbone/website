p Do you want to feel proud of your work? Write code that your colleagues will admire? Move fast without compromising quality? Build long-living software that is easy and fun to maintain? Get out of technical debt without big upfront time investment? Professionally articulate technical decisions to your team and management?

p Then this course is for you.

p During this 
	strong intensive, 
	strong practical and 
	strong entertaining 
	| 2-day course you will learn principles, practices and patterns for writing readable, maintainable and effective code.

blockquote The course is updated to support Java 8 and functional programming idioms

p Through real-world stories, code examples, case studies and teamwork you will understand what does it mean to think and behave like a software craftsman, how to keep your coding skills up to date, how to understand and improve legacy codebases, facilitate effective code reviews, get closer to successful professional life and much more.

blockquote Attendees will receive practical homework assignment for skill polishing and certification purposes. Homework will be reviewed and supplemented by constructive feedback.

h2 Coverage

h3 
	strong Software craftsmanship 
	| (professionalism, attitude, values and pride)
h3 
	strong Software development economy 
	| (clean code rationale, design entropy, consequences of bad code)
h3 
	strong Principles, rules, laws and dilemmas 
	| (use-reuse paradox, consistency, KISS, SOLID, POP, DRY, YAGNI, just-enough design)
h3 
	strong Clean coding practices 
h4 Effective Naming
h4 Effective Conditionals
h4 Effective Functions
h4 Effective Classes (abstraction, boundaries, coupling, cohesion, pathology, aggregates, entities, value objects, specifications, repositories)
h4 Effective Comments (when and how to avoid them)
h4 Effective Packaging (evil layering, anti-corruption, subdomains, bounded contexts, structure verification)
h4 Effective Logging
h4 Effective Exception Handling
h4 Effective Concurrency (STM and RxJava)
h3 
	strong How to deal with legacy code 
	| (big-bangs, boy scout rule, chia pet pattern, test seams, mikado method)
h3
	strong How to write testable code 
	| (testing hotdog, red-green-refactor, feedback cycles, safety nets, mocking, stubbing, FIRST)
h3 
	strong How to stay clean 
	| (refactoring, code reviews, pairing, CoPs, brown-bags, quality forecasting)
h3 
	strong Continuous improvement 
	| (books, videos, courses, OSS, mentorship, apprenticeship)
h3 
	strong Career advice 
	| (moving towards architect/leader/manager)
h3 
	strong â€¦ and much more!
