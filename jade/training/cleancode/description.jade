p Do you want to feel proud of your work? Write code that your colleagues will admire? Move fast without compromising quality? Build long-living software that is easy and fun to maintain? Get out of technical debt without big upfront time investment? Professionally articulate technical decisions to your team and management? Build remarkable engineering career?

p Then this course is for you.

p During this 
	strong intensive, 
	strong practical and 
	strong entertaining 
	| 2-day course you will learn principles, practices and patterns for writing readable, maintainable and effective code. 

blockquote The course is based on real-world project code, stories and examples

blockquote The course is updated to support Java 8 and functional programming idioms

blockquote The course will show many frameworks in action including Spring Cloud, Netflix OSS stack, Spock and others

blockquote Attendees will receive practical homework assignment for skill polishing and certification purposes. Homework will be reviewed and supplemented by constructive feedback.

h2 Coverage

h3 
	strong Software development economy 
	| (clean code rationale, design entropy, busting "quality is expensive" myth, consequences of bad code)
h3 
	strong Principles, rules, laws and dilemmas 
	| (use-reuse paradox, specific-generic dilemma, Law of Demeter, KISS, SOLID, POP, DRY, YAGNI, just-enough design)
h3 
	strong Clean coding practices 
h4 Effective Naming (intention-revealing naming, abbreviations, domain dictionary, plurals vs. singulars, taking scope into account)
h4 Effective Conditionals (how and when to avoid branching, how to eliminate nested branching, making branching easy-to-read)
h4 Effective Functions (nulls vs. optionals, choosing parameter number and ordering, step-down rule, communicating side-effects)
h4 Effective Classes (object thinking, OO meets functional, abstraction, boundaries, forms of coupling, cohesion, pathology, aggregates, entities, value objects, specifications)
h4 Effective Comments (when and how to avoid them)
h4 Effective Packaging (evil layering, anti-corruption, subdomains, bounded contexts, structure verification)
h4 Effective Logging (treating logging as a dependency, event streams)
h4 Effective Persistence (defining transaction management strategy, ORM or not to ORM, repositories, finders)
h4 Effective Validation (simple and complex rule validation, client vs. server side, avoiding rule duplication)
h4 Effective Exception Handling (when and how to handle exceptions, designing exception hierarchy, checked exceptions)
h4 Effective Modularity (modularity patterns, VeriPacks)
h4 Effective Resilience (failure modes, responding to failures, stability patterns, Hystrix)
h4 Effective Configuration (how to make an application Ops-friendly)
h4 Effective Concurrency (STM and RxJava, testing concurrency)
h3 
	strong How to deal with legacy code 
	| (big-bangs, boy scout rule, chia pet pattern, test seams, mikado method)
h3
	strong How to handle external pressure 
	| (promises, estimation, deadlines, how and when to say "no", negotiation and compromise)	
h3
	strong How to write testable code 
	| (taking responsibility over quality, reducing the feedback cycles, testing hot-dog, testing time, file system and 3rd party interactions)
h3 
	strong How to stay clean and move fast 
	| (incremental refactoring, effective code reviews, pairing, CoPs, brown-bags, quality forecasting with Sonar)
h3
	strong How to drive technical change 
	| (overcoming skepticism from "seniors" and management, leadership by example, choosing the right battles, finding backers)
h3 
	strong Continuous learning & improvement 
	| (how to find time for learning and learn fast, personal bookshelf, personal learning plan, becoming a mentor, becoming a speaker)
h3 
	strong Career advice 
	| (building remarkable reputation, moving towards architect/technical leader/independent consultant)
h3 
	strong â€¦ and much more!
